{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategorias","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","target","value","type","onChange","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mLAYeA,G,OAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,iCCJDQ,EAAc,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAExC,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,8BACI,sBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBAEFC,QAAQC,IAAIH,GACZN,EAAa,WAAb,GAAc,CAACM,EAAEI,OAAO,GAAGC,QAA3B,mBAAqCV,MAMjC,SACI,uBACIW,KAAK,OACLD,MAAOR,EACPU,SAlBU,SAACP,GACvBF,EAAcE,EAAEI,OAAOC,e,0BCPdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCCXO,EAAc,SAAC,GAAW,IAAVL,EAAS,EAATA,IACzB,OACI,gCACI,qBAAKM,IAAKN,EAAIR,IAAKe,IAAKP,EAAIE,QAC5B,4BAAIF,EAAIE,YCDPM,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAGrB,ECJwB,SAACA,GAEzB,MAA0Bb,mBAAS,CAC/BoB,KAAK,GACLY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNvB,EAAQC,GAAUtB,MAAK,SAAC6C,GACpBF,EAAS,CACLd,KAAMgB,EACNJ,SAAQ,SAGlB,CAACnB,IAEIoB,EDZkBI,CAAaxB,GAA9BO,EAAR,EAAQA,KAAR,EAAaY,QAIb,OACI,gCACI,6BAAKnB,IAIAO,EAAKE,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,CAA0BA,IAAKA,GAAbA,EAAIC,WEY1Bc,EA1BM,WAGjB,MAAoCtC,mBAAS,CAAC,YAA9C,mBAAOD,EAAP,KAAmBD,EAAnB,KAGA,OAAQ,qCACR,8CACA,cAAC,EAAD,CAAaA,cAAeA,EAAeC,WAAYA,IACvD,uBAGA,6BAEQA,EAAWuB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,YCd/B0B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BtD,M","file":"static/js/main.0ce90c1c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategorias, categories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        console.log(e);\n        setCategorias([e.target[0].value],...categories)\n    }\n\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n\n\n            </form>\n        </div>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategorias : PropTypes.func.isRequired\n}\n","\n    export const getGifs = async(category) => {\n\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=3gLBsy9K6oBDh0cyJdm3GFYi0ZhbtKFp`\n        const resp = await fetch(url);\n        const {data} = await resp.json();\n\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images.downsized_medium.url\n            }\n        })\n\n        return gifs;\n    }","import React from 'react'\n\nexport const GifGridItem = ({img}) => {\n    return (\n        <div>\n            <img src={img.url} alt={img.title}></img>\n            <p>{img.title}</p>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n\n    const { data,loading } = useFetchGifs(category);\n\n \n\n    return (\n        <div>\n            <h3>{category}</h3>\n\n          \n            {\n                 data.map( img => \n                   <GifGridItem key={img.id} img={img}/>\n                 )\n            }\n        \n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    })\n\n    useEffect(() =>{\n        getGifs(category).then((imgs) =>{\n            setstate({\n                data: imgs,\n                loading:false,\n            })\n        })\n    },[category])\n\n    return state;\n}\n","import { getDefaultNormalizer } from \"@testing-library/dom\"\nimport React, {useState} from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n\n\n    const [categories, setCategorias] = useState(['Ourense'])\n\n\n    return (<>\n    <h2>GifExpertApp</h2>\n    <AddCategory setCategorias={setCategorias} categories={categories}/>\n    <hr></hr>\n\n    \n    <ol>\n        {\n            categories.map( category => (\n                <GifGrid  key={category} category={category}/>\n            ))\n        }\n    </ol>\n    \n    </>\n    )\n\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n//crear co"],"sourceRoot":""}